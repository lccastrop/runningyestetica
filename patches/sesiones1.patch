diff --git a/backend/index.js b/backend/index.js
index 35cd9843f57a5ed2f0ad3cb35b176cd3bec129bb..a87ecd1c412c55158460066f5fee67f34dbaa658 100644
--- a/backend/index.js
+++ b/backend/index.js
@@ -1,47 +1,120 @@
 // backend/index.js
 const express = require('express');
 const cors = require('cors');
 const db = require('./db');
 const multer = require('multer');
 const csv = require('csv-parser');
 const fs = require('fs');
+const session = require('express-session');
+const MySQLStore = require('express-mysql-session')(session);
+const bcrypt = require('bcryptjs');
+require('dotenv').config();
 
 const app = express();
 const PORT = process.env.PORT || 3001;
 
 // Middleware
-app.use(cors());
+app.use(cors({ origin: true, credentials: true }));
 app.use(express.json());
 
+const sessionStore = new MySQLStore({
+  host: process.env.DB_HOST,
+  user: process.env.DB_USER,
+  password: process.env.DB_PASSWORD,
+  database: process.env.DB_NAME,
+  clearExpired: true,
+  checkExpirationInterval: 15 * 60 * 1000,
+  expiration: 24 * 60 * 60 * 1000,
+  createDatabaseTable: false,
+  schema: {
+    tableName: 'sessions',
+    columnNames: {
+      session_id: 'session_id',
+      expires: 'expires',
+      data: 'data',
+    },
+  },
+});
+
+app.use(
+  session({
+    key: 'session_id',
+    secret: process.env.SESSION_SECRET || 'devsecret',
+    store: sessionStore,
+    resave: false,
+    saveUninitialized: false,
+    cookie: { maxAge: 24 * 60 * 60 * 1000 },
+  })
+);
+
 const upload = multer({ dest: 'uploads/' });
 
 // Ruta de prueba
 app.get('/', (req, res) => {
   res.send('API de running funcionando ðŸŽ½');
 });
 
+// Rutas de autenticaciÃ³n
+app.post('/login', (req, res) => {
+  const { email, password } = req.body;
+  if (!email || !password) {
+    return res.status(400).json({ error: 'Faltan credenciales' });
+  }
+
+  const query = 'SELECT id, email, password_hash, role FROM users WHERE email = ?';
+  db.query(query, [email], (err, results) => {
+    if (err) return res.status(500).json({ error: 'Error en la base de datos' });
+    if (results.length === 0) return res.status(401).json({ error: 'Credenciales invÃ¡lidas' });
+
+    const user = results[0];
+    bcrypt.compare(password, user.password_hash, (err, match) => {
+      if (err) return res.status(500).json({ error: 'Error al verificar contraseÃ±a' });
+      if (!match) return res.status(401).json({ error: 'Credenciales invÃ¡lidas' });
+
+      req.session.user = { id: user.id, email: user.email, role: user.role };
+      res.json({ message: 'Inicio de sesiÃ³n exitoso', user: req.session.user });
+    });
+  });
+});
+
+app.get('/session', (req, res) => {
+  if (req.session.user) {
+    res.json({ authenticated: true, user: req.session.user });
+  } else {
+    res.status(401).json({ authenticated: false });
+  }
+});
+
+app.post('/logout', (req, res) => {
+  req.session.destroy((err) => {
+    if (err) return res.status(500).json({ error: 'Error al cerrar sesiÃ³n' });
+    res.clearCookie('session_id');
+    res.json({ message: 'SesiÃ³n cerrada' });
+  });
+});
+
 // Iniciar servidor
 app.listen(PORT, () => {
   console.log(`Servidor corriendo en http://localhost:${PORT}`);
 });
 
 //ANALISIS INICIA
 app.get('/analisis-carrera-ritmos/:id', (req, res) => {
   const carreraId = req.params.id;
 
   const rangos = [
     { etiqueta: '< 03:20', min: 0, max: 199 },
     { etiqueta: '03:20â€“03:45', min: 200, max: 225 },
     { etiqueta: '03:45â€“04:00', min: 226, max: 240 },
     { etiqueta: '04:00â€“04:15', min: 241, max: 255 },
     { etiqueta: '04:16â€“04:46', min: 256, max: 286 },
     { etiqueta: '04:47â€“05:14', min: 287, max: 314 },
     { etiqueta: '05:15â€“05:30', min: 315, max: 330 },
     { etiqueta: '05:31â€“06:30', min: 331, max: 390 },
     { etiqueta: '06:31â€“07:37', min: 391, max: 457 },
     { etiqueta: '07:38â€“08:28', min: 458, max: 508 },
     { etiqueta: 'â‰¥ 08:29', min: 509, max: 10000 }
   ];
 
   const queries = rangos.map(rango => `
     SELECT
